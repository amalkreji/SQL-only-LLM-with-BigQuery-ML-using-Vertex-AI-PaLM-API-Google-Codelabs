[{
  "ml_generate_text_llm_result": " This is CSS code. It sets the value of the CSS property \"p\" to \"v\" for the element \"E\" when it has the focus.",
  "ml_generate_text_rai_result": "{\"blocked\":false,\"categories\":[],\"scores\":[]}",
  "ml_generate_text_status": "",
  "prompt": "Can you read the code in the following text and generate a summary for what the code is doing and what language it is written in:{\n  \"type\": \"stylesheet\",\n  \"content\": [\n    {\n      \"type\": \"ruleset\",\n      \"content\": [\n        {\n          \"type\": \"selector\",\n          \"content\": [\n            {\n              \"type\": \"typeSelector\",\n              \"content\": [\n                {\n                  \"type\": \"ident\",\n                  \"content\": \"E\",\n                  \"syntax\": \"css\",\n                  \"start\": {\n                    \"line\": 1,\n                    \"column\": 1\n                  },\n                  \"end\": {\n                    \"line\": 1,\n                    \"column\": 1\n                  }\n                }\n              ],\n              \"syntax\": \"css\",\n              \"start\": {\n                \"line\": 1,\n                \"column\": 1\n              },\n              \"end\": {\n                \"line\": 1,\n                \"column\": 1\n              }\n            },\n            {\n              \"type\": \"pseudoClass\",\n              \"content\": [\n                {\n                  \"type\": \"ident\",\n                  \"content\": \"focus\",\n                  \"syntax\": \"css\",\n                  \"start\": {\n                    \"line\": 1,\n                    \"column\": 3\n                  },\n                  \"end\": {\n                    \"line\": 1,\n                    \"column\": 7\n                  }\n                }\n              ],\n              \"syntax\": \"css\",\n              \"start\": {\n                \"line\": 1,\n                \"column\": 2\n              },\n              \"end\": {\n                \"line\": 1,\n                \"column\": 7\n              }\n            }\n          ],\n          \"syntax\": \"css\",\n          \"start\": {\n            \"line\": 1,\n            \"column\": 1\n          },\n          \"end\": {\n            \"line\": 1,\n            \"column\": 7\n          }\n        },\n        {\n          \"type\": \"space\",\n          \"content\": \" \",\n          \"syntax\": \"css\",\n          \"start\": {\n            \"line\": 1,\n            \"column\": 8\n          },\n          \"end\": {\n            \"line\": 1,\n            \"column\": 8\n          }\n        },\n        {\n          \"type\": \"block\",\n          \"content\": [\n            {\n              \"type\": \"space\",\n              \"content\": \" \",\n              \"syntax\": \"css\",\n              \"start\": {\n                \"line\": 1,\n                \"column\": 10\n              },\n              \"end\": {\n                \"line\": 1,\n                \"column\": 10\n              }\n            },\n            {\n              \"type\": \"declaration\",\n              \"content\": [\n                {\n                  \"type\": \"property\",\n                  \"content\": [\n                    {\n                      \"type\": \"ident\",\n                      \"content\": \"p\",\n                      \"syntax\": \"css\",\n                      \"start\": {\n                        \"line\": 1,\n                        \"column\": 11\n                      },\n                      \"end\": {\n                        \"line\": 1,\n                        \"column\": 11\n                      }\n                    }\n                  ],\n                  \"syntax\": \"css\",\n                  \"start\": {\n                    \"line\": 1,\n                    \"column\": 11\n                  },\n                  \"end\": {\n                    \"line\": 1,\n                    \"column\": 11\n                  }\n                },\n                {\n                  \"type\": \"space\",\n                  \"content\": \" \",\n                  \"syntax\": \"css\",\n                  \"start\": {\n                    \"line\": 1,\n                    \"column\": 12\n                  },\n                  \"end\": {\n                    \"line\": 1,\n                    \"column\": 12\n                  }\n                },\n                {\n                  \"type\": \"propertyDelimiter\",\n                  \"content\": \":\",\n                  \"syntax\": \"css\",\n                  \"start\": {\n                    \"line\": 1,\n                    \"column\": 13\n                  },\n                  \"end\": {\n                    \"line\": 1,\n                    \"column\": 13\n                  }\n                },\n                {\n                  \"type\": \"space\",\n                  \"content\": \" \",\n                  \"syntax\": \"css\",\n                  \"start\": {\n                    \"line\": 1,\n                    \"column\": 14\n                  },\n                  \"end\": {\n                    \"line\": 1,\n                    \"column\": 14\n                  }\n                },\n                {\n                  \"type\": \"value\",\n                  \"content\": [\n                    {\n                      \"type\": \"ident\",\n                      \"content\": \"v\",\n                      \"syntax\": \"css\",\n                      \"start\": {\n                        \"line\": 1,\n                        \"column\": 15\n                      },\n                      \"end\": {\n                        \"line\": 1,\n                        \"column\": 15\n                      }\n                    }\n                  ],\n                  \"syntax\": \"css\",\n                  \"start\": {\n                    \"line\": 1,\n                    \"column\": 15\n                  },\n                  \"end\": {\n                    \"line\": 1,\n                    \"column\": 15\n                  }\n                }\n              ],\n              \"syntax\": \"css\",\n              \"start\": {\n                \"line\": 1,\n                \"column\": 11\n              },\n              \"end\": {\n                \"line\": 1,\n                \"column\": 15\n              }\n            },\n            {\n              \"type\": \"space\",\n              \"content\": \" \",\n              \"syntax\": \"css\",\n              \"start\": {\n                \"line\": 1,\n                \"column\": 16\n              },\n              \"end\": {\n                \"line\": 1,\n                \"column\": 16\n              }\n            }\n          ],\n          \"syntax\": \"css\",\n          \"start\": {\n            \"line\": 1,\n            \"column\": 9\n          },\n          \"end\": {\n            \"line\": 1,\n            \"column\": 17\n          }\n        }\n      ],\n      \"syntax\": \"css\",\n      \"start\": {\n        \"line\": 1,\n        \"column\": 1\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 17\n      }\n    }\n  ],\n  \"syntax\": \"css\",\n  \"start\": {\n    \"line\": 1,\n    \"column\": 1\n  },\n  \"end\": {\n    \"line\": 1,\n    \"column\": 17\n  }\n}"
}, {
  "ml_generate_text_llm_result": " ```java\r\nimport org.eclipse.jface.action.*;\r\nimport org.eclipse.jface.viewers.ISelection;\r\nimport org.eclipse.jface.viewers.ISelectionProvider;\r\nimport org.eclipse.jface.viewers.IStructuredSelection;\r\nimport org.eclipse.swt.dnd.TextTransfer;\r\nimport org.eclipse.ui.IEditorPart;\r\nimport org.eclipse.ui.IWorkbenchPart;\r\nimport org.eclipse.ui.",
  "ml_generate_text_rai_result": "{\"blocked\":false,\"categories\":[\"Legal\"],\"scores\":[0.1]}",
  "ml_generate_text_status": "",
  "prompt": "Can you read the code in the following text and generate a summary for what the code is doing and what language it is written in:/*\r\n * DBeaver - Universal Database Manager\r\n * Copyright (C) 2010-2016 Serge Rieder (serge@jkiss.org)\r\n *\r\n * This program is free software; you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License (version 2)\r\n * as published by the Free Software Foundation.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License along\r\n * with this program; if not, write to the Free Software Foundation, Inc.,\r\n * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\r\n */\r\npackage org.jkiss.dbeaver.ui.editors.sql.generator;\r\n\r\nimport org.eclipse.jface.action.*;\r\nimport org.eclipse.jface.viewers.ISelection;\r\nimport org.eclipse.jface.viewers.ISelectionProvider;\r\nimport org.eclipse.jface.viewers.IStructuredSelection;\r\nimport org.eclipse.swt.dnd.TextTransfer;\r\nimport org.eclipse.ui.IEditorPart;\r\nimport org.eclipse.ui.IWorkbenchPart;\r\nimport org.eclipse.ui.actions.CompoundContributionItem;\r\nimport org.jkiss.code.Nullable;\r\nimport org.jkiss.dbeaver.DBException;\r\nimport org.jkiss.dbeaver.Log;\r\nimport org.jkiss.dbeaver.core.DBeaverUI;\r\nimport org.jkiss.dbeaver.model.DBPDataSource;\r\nimport org.jkiss.dbeaver.model.DBPObject;\r\nimport org.jkiss.dbeaver.model.DBPScriptObject;\r\nimport org.jkiss.dbeaver.model.DBUtils;\r\nimport org.jkiss.dbeaver.model.data.DBDAttributeBinding;\r\nimport org.jkiss.dbeaver.model.navigator.DBNDatabaseNode;\r\nimport org.jkiss.dbeaver.model.navigator.DBNNode;\r\nimport org.jkiss.dbeaver.model.runtime.DBRProgressMonitor;\r\nimport org.jkiss.dbeaver.model.runtime.DBRRunnableWithResult;\r\nimport org.jkiss.dbeaver.model.sql.SQLDialect;\r\nimport org.jkiss.dbeaver.model.sql.SQLUtils;\r\nimport org.jkiss.dbeaver.model.struct.DBSDataContainer;\r\nimport org.jkiss.dbeaver.model.struct.DBSEntity;\r\nimport org.jkiss.dbeaver.model.struct.DBSEntityAttribute;\r\nimport org.jkiss.dbeaver.model.struct.DBSObject;\r\nimport org.jkiss.dbeaver.model.struct.rdb.DBSTable;\r\nimport org.jkiss.dbeaver.ui.DBeaverIcons;\r\nimport org.jkiss.dbeaver.ui.UIIcon;\r\nimport org.jkiss.dbeaver.ui.UIUtils;\r\nimport org.jkiss.dbeaver.ui.controls.resultset.IResultSetController;\r\nimport org.jkiss.dbeaver.ui.controls.resultset.IResultSetSelection;\r\nimport org.jkiss.dbeaver.ui.controls.resultset.ResultSetRow;\r\nimport org.jkiss.dbeaver.ui.dialogs.sql.ViewSQLDialog;\r\nimport org.jkiss.dbeaver.utils.RuntimeUtils;\r\nimport org.jkiss.utils.CommonUtils;\r\n\r\nimport java.lang.reflect.InvocationTargetException;\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\n\r\npublic class GenerateSQLContributor extends CompoundContributionItem {\r\n\r\n    static protected final Log log \u003d Log.getLog(GenerateSQLContributor.class);\r\n\r\n    @Override\r\n    protected IContributionItem[] getContributionItems()\r\n    {\r\n        IWorkbenchPart part \u003d DBeaverUI.getActiveWorkbenchWindow().getActivePage().getActivePart();\r\n        IStructuredSelection structuredSelection \u003d GenerateSQLContributor.getSelectionFromPart(part);\r\n        if (structuredSelection \u003d\u003d null || structuredSelection.isEmpty()) {\r\n            return new IContributionItem[0];\r\n        }\r\n\r\n        List\u003cIContributionItem\u003e menu \u003d new ArrayList\u003c\u003e();\r\n        if (structuredSelection instanceof IResultSetSelection) {\r\n            // Results\r\n            makeResultSetContributions(menu, (IResultSetSelection) structuredSelection);\r\n\r\n        } else {\r\n            final DBSObject object \u003d\r\n                ((DBNDatabaseNode)RuntimeUtils.getObjectAdapter(structuredSelection.getFirstElement(), DBNNode.class)).getObject();\r\n            makeTableContributions(menu, object);\r\n        }\r\n        return menu.toArray(new IContributionItem[menu.size()]);\r\n    }\r\n\r\n    private void makeTableContributions(List\u003cIContributionItem\u003e menu, final DBSObject object)\r\n    {\r\n        if (object instanceof DBSTable) {\r\n            DBSTable table \u003d (DBSTable)object;\r\n            // Table\r\n            menu.add(makeAction(\"SELECT \", new TableAnalysisRunner(table) {\r\n                @Override\r\n                public void generateSQL(DBRProgressMonitor monitor, StringBuilder sql) throws DBException {\r\n                    sql.append(\"SELECT \");\r\n                    boolean hasAttr \u003d false;\r\n                    for (DBSEntityAttribute attr : getAllAttributes(monitor)) {\r\n                        if (DBUtils.isHiddenObject(attr)) {\r\n                            continue;\r\n                        }\r\n                        if (hasAttr) sql.append(\", \");\r\n                        sql.append(DBUtils.getObjectFullName(attr));\r\n                        hasAttr \u003d true;\r\n                    }\r\n                    sql.append(\"\\nFROM \").append(DBUtils.getObjectFullName(object));\r\n                    sql.append(\";\\n\");\r\n                }\r\n            }));\r\n            menu.add(makeAction(\"INSERT \", new TableAnalysisRunner(table) {\r\n                @Override\r\n                public void generateSQL(DBRProgressMonitor monitor, StringBuilder sql) throws DBException {\r\n                    sql.append(\"INSERT INTO \").append(DBUtils.getObjectFullName(object)).append(\"\\n(\");\r\n                    boolean hasAttr \u003d false;\r\n                    for (DBSEntityAttribute attr : getAllAttributes(monitor)) {\r\n                        if (attr.isPseudoAttribute() || DBUtils.isHiddenObject(attr)) {\r\n                            continue;\r\n                        }\r\n                        if (hasAttr) sql.append(\", \");\r\n                        sql.append(DBUtils.getObjectFullName(attr));\r\n                        hasAttr \u003d true;\r\n                    }\r\n                    sql.append(\")\\nVALUES(\");\r\n                    hasAttr \u003d false;\r\n                    for (DBSEntityAttribute attr : getAllAttributes(monitor)) {\r\n                        if (attr.isPseudoAttribute() || DBUtils.isHiddenObject(attr)) {\r\n                            continue;\r\n                        }\r\n                        if (hasAttr) sql.append(\", \");\r\n                        appendDefaultValue(sql, attr);\r\n                        hasAttr \u003d true;\r\n                    }\r\n                    sql.append(\");\\n\");\r\n                }\r\n\r\n            }));\r\n            menu.add(makeAction(\"UPDATE \", new TableAnalysisRunner(table) {\r\n                @Override\r\n                public void generateSQL(DBRProgressMonitor monitor, StringBuilder sql) throws DBException {\r\n                    Collection\u003c? extends DBSEntityAttribute\u003e keyAttributes \u003d getKeyAttributes(monitor);\r\n                    sql.append(\"UPDATE \").append(DBUtils.getObjectFullName(object))\r\n                        .append(\"\\nSET \");\r\n                    boolean hasAttr \u003d false;\r\n                    for (DBSEntityAttribute attr : getValueAttributes(monitor, keyAttributes)) {\r\n                        if (attr.isPseudoAttribute() || DBUtils.isHiddenObject(attr)) {\r\n                            continue;\r\n                        }\r\n                        if (hasAttr) sql.append(\", \");\r\n                        sql.append(DBUtils.getObjectFullName(attr)).append(\"\u003d\");\r\n                        appendDefaultValue(sql, attr);\r\n                        hasAttr \u003d true;\r\n                    }\r\n                    if (!CommonUtils.isEmpty(keyAttributes)) {\r\n                        sql.append(\"\\nWHERE \");\r\n                        hasAttr \u003d false;\r\n                        for (DBSEntityAttribute attr : keyAttributes) {\r\n                            if (hasAttr) sql.append(\" AND \");\r\n                            sql.append(DBUtils.getObjectFullName(attr)).append(\"\u003d\");\r\n                            appendDefaultValue(sql, attr);\r\n                            hasAttr \u003d true;\r\n                        }\r\n                    }\r\n                    sql.append(\";\\n\");\r\n                }\r\n            }));\r\n            menu.add(makeAction(\"DELETE \", new TableAnalysisRunner(table) {\r\n                @Override\r\n                public void generateSQL(DBRProgressMonitor monitor, StringBuilder sql) throws DBException {\r\n                    sql.append(\"DELETE FROM  \").append(DBUtils.getObjectFullName(object))\r\n                        .append(\"\\nWHERE \");\r\n                    Collection\u003c? extends DBSEntityAttribute\u003e keyAttributes \u003d getKeyAttributes(monitor);\r\n                    if (CommonUtils.isEmpty(keyAttributes)) {\r\n                        keyAttributes \u003d getAllAttributes(monitor);\r\n                    }\r\n                    boolean hasAttr \u003d false;\r\n                    for (DBSEntityAttribute attr : keyAttributes) {\r\n                        if (hasAttr) sql.append(\" AND \");\r\n                        sql.append(DBUtils.getObjectFullName(attr)).append(\"\u003d\");\r\n                        appendDefaultValue(sql, attr);\r\n                        hasAttr \u003d true;\r\n                    }\r\n                    sql.append(\";\\n\");\r\n                }\r\n            }));\r\n            menu.add(makeAction(\"MERGE\", new TableAnalysisRunner(table) {\r\n                @Override\r\n                public void generateSQL(DBRProgressMonitor monitor, StringBuilder sql) throws DBException {\r\n                    boolean hasAttr \u003d false;\r\n\r\n                    sql.append(\"MERGE INTO \").append(DBUtils.getObjectFullName(object)).append(\" AS tgt\\n\");\r\n                    sql.append(\"USING SOURCE_TABLE AS src\\n\");\r\n                    Collection\u003c? extends DBSEntityAttribute\u003e keyAttributes \u003d getKeyAttributes(monitor);\r\n                    if (!CommonUtils.isEmpty(keyAttributes)) {\r\n                        sql.append(\"ON (\");\r\n                        for (DBSEntityAttribute attr : keyAttributes) {\r\n                            if (hasAttr) sql.append(\" AND \");\r\n                            sql.append(\"tgt.\").append(DBUtils.getQuotedIdentifier(attr))\r\n                                .append(\"\u003dsrc.\").append(DBUtils.getQuotedIdentifier(attr));\r\n                            hasAttr \u003d true;\r\n                        }\r\n                        sql.append(\")\\n\");\r\n                    }\r\n                    sql.append(\"WHEN MATCHED\\nTHEN UPDATE SET\\n\");\r\n                    hasAttr \u003d false;\r\n                    for (DBSEntityAttribute attr : getValueAttributes(monitor, keyAttributes)) {\r\n                        if (hasAttr) sql.append(\", \");\r\n                        sql.append(\"tgt.\").append(DBUtils.getQuotedIdentifier(attr))\r\n                            .append(\"\u003dsrc.\").append(DBUtils.getQuotedIdentifier(attr));\r\n                        hasAttr \u003d true;\r\n                    }\r\n                    sql.append(\"\\nWHEN NOT MATCHED\\nTHEN INSERT (\");\r\n                    hasAttr \u003d false;\r\n                    for (DBSEntityAttribute attr : getAllAttributes(monitor)) {\r\n                        if (hasAttr) sql.append(\", \");\r\n                        sql.append(DBUtils.getQuotedIdentifier(attr));\r\n                        hasAttr \u003d true;\r\n                    }\r\n                    sql.append(\")\\nVALUES (\");\r\n                    hasAttr \u003d false;\r\n                    for (DBSEntityAttribute attr : getAllAttributes(monitor)) {\r\n                        if (hasAttr) sql.append(\", \");\r\n                        sql.append(\"src.\").append(DBUtils.getQuotedIdentifier(attr));\r\n                        hasAttr \u003d true;\r\n                    }\r\n                    sql.append(\");\\n\");\r\n                }\r\n            }));\r\n        }\r\n        if (object instanceof DBPScriptObject) {\r\n            final DBPScriptObject so \u003d (DBPScriptObject)object;\r\n            if (menu.size() \u003e 0) {\r\n                menu.add(new Separator());\r\n            }\r\n            menu.add(makeAction(\"DDL\", new SQLGenerator\u003cDBPScriptObject\u003e(so) {\r\n                @Override\r\n                public void generateSQL(DBRProgressMonitor monitor, StringBuilder sql) throws DBException {\r\n                    String definitionText \u003d so.getObjectDefinitionText(monitor);\r\n                    sql.append(definitionText);\r\n                }\r\n            }));\r\n        }\r\n    }\r\n\r\n    private void makeResultSetContributions(List\u003cIContributionItem\u003e menu, IResultSetSelection rss)\r\n    {\r\n        final IResultSetController rsv \u003d rss.getController();\r\n        DBSDataContainer dataContainer \u003d rsv.getDataContainer();\r\n        DBSEntity entity \u003d dataContainer instanceof DBSEntity ? (DBSEntity) dataContainer : null;\r\n        if (entity \u003d\u003d null) {\r\n            entity \u003d rsv.getModel().getSingleSource();\r\n        }\r\n        if (entity !\u003d null) {\r\n            final Collection\u003cResultSetRow\u003e selectedRows \u003d rss.getSelectedRows();\r\n            if (!CommonUtils.isEmpty(selectedRows)) {\r\n                SQLDialect sqlDialect \u003d SQLUtils.getDialectFromObject(rsv.getDataContainer().getDataSource());\r\n\r\n                menu.add(makeAction(\"SELECT by Unique Key\", new TableAnalysisRunner(entity) {\r\n                    @Override\r\n                    public void generateSQL(DBRProgressMonitor monitor, StringBuilder sql) throws DBException\r\n                    {\r\n                        for (ResultSetRow firstRow : selectedRows) {\r\n\r\n                            Collection\u003c? extends DBSEntityAttribute\u003e keyAttributes \u003d getKeyAttributes(monitor);\r\n                            sql.append(\"SELECT \");\r\n                            boolean hasAttr \u003d false;\r\n                            for (DBSEntityAttribute attr : getValueAttributes(monitor, keyAttributes)) {\r\n                                if (hasAttr) sql.append(\", \");\r\n                                sql.append(DBUtils.getObjectFullName(attr));\r\n                                hasAttr \u003d true;\r\n                            }\r\n                            sql.append(\"\\nFROM \").append(DBUtils.getObjectFullName(object));\r\n                            sql.append(\"\\nWHERE \");\r\n                            hasAttr \u003d false;\r\n                            for (DBSEntityAttribute attr : keyAttributes) {\r\n                                if (hasAttr) sql.append(\" AND \");\r\n                                DBDAttributeBinding binding \u003d rsv.getModel().getAttributeBinding(attr);\r\n                                sql.append(DBUtils.getObjectFullName(attr)).append(\"\u003d\");\r\n                                if (binding \u003d\u003d null) {\r\n                                    appendDefaultValue(sql, attr);\r\n                                } else {\r\n                                    appendAttributeValue(rsv, sql, binding, firstRow);\r\n                                }\r\n                                hasAttr \u003d true;\r\n                            }\r\n                            sql.append(\";\\n\");\r\n                        }\r\n                    }\r\n                }));\r\n                menu.add(makeAction(\"INSERT\", new TableAnalysisRunner(entity) {\r\n                    @Override\r\n                    public void generateSQL(DBRProgressMonitor monitor, StringBuilder sql) throws DBException {\r\n                        for (ResultSetRow firstRow : selectedRows) {\r\n\r\n                            Collection\u003c? extends DBSEntityAttribute\u003e allAttributes \u003d getAllAttributes(monitor);\r\n                            sql.append(\"INSERT INTO \").append(DBUtils.getObjectFullName(object));\r\n                            sql.append(\"\\n(\");\r\n                            boolean hasAttr \u003d false;\r\n                            for (DBSEntityAttribute attr : allAttributes) {\r\n                                if (attr.isPseudoAttribute() || DBUtils.isHiddenObject(attr)) {\r\n                                    continue;\r\n                                }\r\n                                if (hasAttr) sql.append(\", \");\r\n                                sql.append(DBUtils.getObjectFullName(attr));\r\n                                hasAttr \u003d true;\r\n                            }\r\n                            sql.append(\")\\nVALUES(\");\r\n                            hasAttr \u003d false;\r\n                            for (DBSEntityAttribute attr : allAttributes) {\r\n                                if (attr.isPseudoAttribute() || DBUtils.isHiddenObject(attr)) {\r\n                                    continue;\r\n                                }\r\n                                if (hasAttr) sql.append(\", \");\r\n                                DBDAttributeBinding binding \u003d rsv.getModel().getAttributeBinding(attr);\r\n                                if (binding \u003d\u003d null) {\r\n                                    appendDefaultValue(sql, attr);\r\n                                } else {\r\n                                    appendAttributeValue(rsv, sql, binding, firstRow);\r\n                                }\r\n                                hasAttr \u003d true;\r\n                            }\r\n                            sql.append(\");\\n\");\r\n                        }\r\n                    }\r\n                }));\r\n\r\n                menu.add(makeAction(\"DELETE by Unique Key\", new TableAnalysisRunner(entity) {\r\n                    @Override\r\n                    public void generateSQL(DBRProgressMonitor monitor, StringBuilder sql) throws DBException\r\n                    {\r\n                        for (ResultSetRow firstRow : selectedRows) {\r\n\r\n                            Collection\u003c? extends DBSEntityAttribute\u003e keyAttributes \u003d getKeyAttributes(monitor);\r\n                            sql.append(\"DELETE FROM \").append(DBUtils.getObjectFullName(object));\r\n                            sql.append(\"\\nWHERE \");\r\n                            boolean hasAttr \u003d false;\r\n                            for (DBSEntityAttribute attr : keyAttributes) {\r\n                                if (hasAttr) sql.append(\" AND \");\r\n                                DBDAttributeBinding binding \u003d rsv.getModel().getAttributeBinding(attr);\r\n                                sql.append(DBUtils.getObjectFullName(attr)).append(\"\u003d\");\r\n                                if (binding \u003d\u003d null) {\r\n                                    appendDefaultValue(sql, attr);\r\n                                } else {\r\n                                    appendAttributeValue(rsv, sql, binding, firstRow);\r\n                                }\r\n                                hasAttr \u003d true;\r\n                            }\r\n                            sql.append(\";\\n\");\r\n                        }\r\n                    }\r\n                }));\r\n            }\r\n        }\r\n    }\r\n\r\n    public static boolean hasContributions(IStructuredSelection selection) {\r\n        // Table\r\n        DBNNode node \u003d RuntimeUtils.getObjectAdapter(selection.getFirstElement(), DBNNode.class);\r\n        if (node instanceof DBNDatabaseNode) {\r\n            DBSObject object \u003d ((DBNDatabaseNode) node).getObject();\r\n            if (object instanceof DBSTable || object instanceof DBPScriptObject) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private abstract static class SQLGenerator\u003cT extends DBPObject\u003e extends DBRRunnableWithResult\u003cString\u003e {\r\n        final protected T object;\r\n\r\n        protected SQLGenerator(T object)\r\n        {\r\n            this.object \u003d object;\r\n        }\r\n\r\n        public T getObject() {\r\n            return object;\r\n        }\r\n\r\n        @Override\r\n        public void run(DBRProgressMonitor monitor) throws InvocationTargetException, InterruptedException\r\n        {\r\n            StringBuilder sql \u003d new StringBuilder(100);\r\n            try {\r\n                generateSQL(monitor, sql);\r\n            } catch (DBException e) {\r\n                throw new InvocationTargetException(e);\r\n            }\r\n            result \u003d sql.toString();\r\n        }\r\n\r\n        protected abstract void generateSQL(DBRProgressMonitor monitor, StringBuilder sql)\r\n            throws DBException;\r\n\r\n    }\r\n\r\n    private abstract static class TableAnalysisRunner extends SQLGenerator\u003cDBSEntity\u003e {\r\n\r\n        protected TableAnalysisRunner(DBSEntity entity)\r\n        {\r\n            super(entity);\r\n        }\r\n\r\n        @Override\r\n        public void run(DBRProgressMonitor monitor) throws InvocationTargetException, InterruptedException\r\n        {\r\n            StringBuilder sql \u003d new StringBuilder(100);\r\n            try {\r\n                generateSQL(monitor, sql);\r\n            } catch (DBException e) {\r\n                throw new InvocationTargetException(e);\r\n            }\r\n            result \u003d sql.toString();\r\n        }\r\n\r\n        protected abstract void generateSQL(DBRProgressMonitor monitor, StringBuilder sql)\r\n            throws DBException;\r\n\r\n        protected Collection\u003c? extends DBSEntityAttribute\u003e getAllAttributes(DBRProgressMonitor monitor) throws DBException\r\n        {\r\n            return CommonUtils.safeCollection(object.getAttributes(monitor));\r\n        }\r\n\r\n        protected Collection\u003c? extends DBSEntityAttribute\u003e getKeyAttributes(DBRProgressMonitor monitor) throws DBException\r\n        {\r\n            return DBUtils.getBestTableIdentifier(monitor, object);\r\n        }\r\n\r\n        protected Collection\u003c? extends DBSEntityAttribute\u003e getValueAttributes(DBRProgressMonitor monitor, Collection\u003c? extends DBSEntityAttribute\u003e keyAttributes) throws DBException\r\n        {\r\n            if (CommonUtils.isEmpty(keyAttributes)) {\r\n                return getAllAttributes(monitor);\r\n            }\r\n            List\u003cDBSEntityAttribute\u003e valueAttributes \u003d new ArrayList\u003c\u003e(getAllAttributes(monitor));\r\n            for (Iterator\u003cDBSEntityAttribute\u003e iter \u003d valueAttributes.iterator(); iter.hasNext(); ) {\r\n                if (keyAttributes.contains(iter.next())) {\r\n                    iter.remove();\r\n                }\r\n            }\r\n            return valueAttributes;\r\n        }\r\n\r\n        protected void appendDefaultValue(StringBuilder sql, DBSEntityAttribute attr)\r\n        {\r\n            if (!CommonUtils.isEmpty(attr.getDefaultValue())) {\r\n                sql.append(attr.getDefaultValue());\r\n            } else {\r\n                switch (attr.getDataKind()) {\r\n                    case BOOLEAN:\r\n                        sql.append(\"false\");\r\n                        break;\r\n                    case NUMERIC:\r\n                        sql.append(\"0\");\r\n                        break;\r\n                    case STRING:\r\n                    case DATETIME:\r\n                        sql.append(\"\u0027\u0027\");\r\n                        break;\r\n                    default:\r\n                        sql.append(\"?\");\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        protected void appendAttributeValue(IResultSetController rsv, StringBuilder sql, DBDAttributeBinding binding, ResultSetRow row)\r\n        {\r\n            DBPDataSource dataSource \u003d rsv.getDataContainer().getDataSource();\r\n            Object value \u003d rsv.getModel().getCellValue(binding, row);\r\n            sql.append(\r\n                SQLUtils.convertValueToSQL(dataSource, binding.getAttribute(), value));\r\n        }\r\n    }\r\n\r\n    private static \u003cT extends DBPObject\u003e ContributionItem makeAction(String text, final SQLGenerator\u003cT\u003e runnable)\r\n    {\r\n        return new ActionContributionItem(\r\n            new Action(text, DBeaverIcons.getImageDescriptor(UIIcon.SQL_TEXT)) {\r\n                @Override\r\n                public void run()\r\n                {\r\n                    DBeaverUI.runInUI(DBeaverUI.getActiveWorkbenchWindow(), runnable);\r\n                    String sql \u003d runnable.getResult();\r\n                    if (sql \u003d\u003d null) {\r\n                        return;\r\n                    }\r\n                    IEditorPart activeEditor \u003d DBeaverUI.getActiveWorkbenchWindow().getActivePage().getActiveEditor();\r\n                    boolean showDialog \u003d true;\r\n/*\r\n                    if (activeEditor instanceof AbstractTextEditor) {\r\n                        AbstractTextEditor textEditor \u003d (AbstractTextEditor)activeEditor;\r\n                        ITextSelection selection \u003d (ITextSelection) textEditor.getSelectionProvider().getSelection();\r\n                        IDocumentProvider provider\u003dtextEditor.getDocumentProvider();\r\n                        IDocument doc \u003d provider.getDocument(activeEditor.getEditorInput());\r\n                        try {\r\n                            sql \u003d GeneralUtils.getDefaultLineSeparator() + sql;\r\n                            doc.replace(selection.getOffset(), selection.getLength(), sql);\r\n                            textEditor.getSelectionProvider().setSelection(\r\n                                new TextSelection(doc, selection.getOffset() + sql.length(), 0));\r\n                        } catch (BadLocationException e) {\r\n                            log.warn(e);\r\n                        }\r\n                        activeEditor.setFocus();\r\n                        showDialog \u003d false;\r\n                    }\r\n*/\r\n                    if (showDialog) {\r\n                        DBPDataSource dataSource \u003d null;\r\n                        if (runnable.getObject() instanceof DBSObject) {\r\n                            dataSource \u003d ((DBSObject)runnable.getObject()).getDataSource();\r\n                        }\r\n                        if (dataSource !\u003d null) {\r\n                            ViewSQLDialog dialog \u003d new ViewSQLDialog(\r\n                                DBeaverUI.getActiveWorkbenchWindow().getActivePage().getActivePart().getSite(),\r\n                                dataSource.getDefaultContext(false),\r\n                                \"Generated SQL\",\r\n                                null,\r\n                                sql);\r\n                            dialog.open();\r\n                        }\r\n                    } else {\r\n                        UIUtils.setClipboardContents(DBeaverUI.getActiveWorkbenchShell().getDisplay(), TextTransfer.getInstance(), sql);\r\n                    }\r\n                }\r\n        });\r\n    }\r\n\r\n    @Nullable\r\n    static IStructuredSelection getSelectionFromPart(IWorkbenchPart part)\r\n    {\r\n        if (part \u003d\u003d null) {\r\n            return null;\r\n        }\r\n        ISelectionProvider selectionProvider \u003d part.getSite().getSelectionProvider();\r\n        if (selectionProvider \u003d\u003d null) {\r\n            return null;\r\n        }\r\n        ISelection selection \u003d selectionProvider.getSelection();\r\n        if (selection.isEmpty() || !(selection instanceof IStructuredSelection)) {\r\n            return null;\r\n        }\r\n        return (IStructuredSelection)selection;\r\n    }\r\n\r\n}\r\n"
}, {
  "ml_generate_text_llm_result": " The code is written in YAML. \n\nThe code is for a blog post. \n\nThe blog post is about Mia Garlick, the new General Counsel at Creative Commons. \n\nThe post describes Mia\u0027s background and experience in IP law, and expresses excitement about her joining the team.",
  "ml_generate_text_rai_result": "{\"blocked\":false,\"categories\":[\"Legal\"],\"scores\":[1]}",
  "ml_generate_text_status": "",
  "prompt": "Can you read the code in the following text and generate a summary for what the code is doing and what language it is written in:---\nlayout: post\ntitle: Meet Mia\ndate: 2005-04-04 01:45:03.000000000 -04:00\ncategories:\n- Weblog\ntags: []\nstatus: publish\ntype: post\npublished: true\nmeta: {}\nauthor:\n  login: glenn\n  email: webmaster+glenn@creativecommons.org\n  display_name: Glenn Otis Brown\n  first_name: Glenn\n  last_name: Otis Brown\n---\n\u003cp\u003eOne bit of joy amidst the sadness of leaving Creative Commons is the opportunity to introduce you to Mia Garlick, our new General Counsel. Mia is an IP expert who just recently came to CC from the Silicon Valley branch of the top-notch law firm Simpson Thatcher and Barlett, which she joined after getting her LLM from Stanford (specializing in Law, Science, and Technology). Before coming to the States, Mia had a far-ranging and powerful IP and media law practice in Australia, her home. I\u0027ve gotten to work with Mia over the last two weeks and am wildly excited both for the staff and for her, as the great CC experiment continues to expand. Mia\u0027s strengths in media, international law, and science fit the organization\u0027s future needs to a T, and her quick wit and energy will make her a blast to work with, inside CC and out. Congrats and best wishes to you, Mia!\u003c/p\u003e\n"
}, {
  "ml_generate_text_llm_result": " This is a Python code written in TensorFlow library. \nThe code defines two functions: conv2d and linear. \n- The conv2d function creates a 2D convolution layer with options for kernel size, stride, and initialization deviation. \n- The linear function creates a fully-connected network.",
  "ml_generate_text_rai_result": "{\"blocked\":false,\"categories\":[],\"scores\":[]}",
  "ml_generate_text_status": "",
  "prompt": "Can you read the code in the following text and generate a summary for what the code is doing and what language it is written in:\"\"\"Useful connections for TensorFlow.\nParag K. Mital, Jan 2016.\n\"\"\"\n\nimport tensorflow as tf\n\n\ndef conv2d(x, n_filters,\n           k_h\u003d5, k_w\u003d5,\n           stride_h\u003d2, stride_w\u003d2,\n           stddev\u003d0.02,\n           activation\u003dlambda x: x,\n           bias\u003dTrue,\n           padding\u003d\u0027SAME\u0027,\n           name\u003d\"Conv2D\"):\n    \"\"\"2D Convolution with options for kernel size, stride, and init deviation.\n\n    Parameters\n    ----------\n    x : Tensor\n        Input tensor to convolve.\n    n_filters : int\n        Number of filters to apply.\n    k_h : int, optional\n        Kernel height.\n    k_w : int, optional\n        Kernel width.\n    stride_h : int, optional\n        Stride in rows.\n    stride_w : int, optional\n        Stride in cols.\n    stddev : float, optional\n        Initialization\u0027s standard deviation.\n    activation : arguments, optional\n        Function which applies a nonlinearity\n    padding : str, optional\n        \u0027SAME\u0027 or \u0027VALID\u0027\n    name : str, optional\n        Variable scope to use.\n\n    Returns\n    -------\n    x : Tensor\n        Convolved input.\n    \"\"\"\n    with tf.variable_scope(name):\n        w \u003d tf.get_variable(\n            \u0027w\u0027, [k_h, k_w, x.get_shape()[-1], n_filters],\n            initializer\u003dtf.truncated_normal_initializer(stddev\u003dstddev))\n        conv \u003d tf.nn.conv2d(\n            x, w, strides\u003d[1, stride_h, stride_w, 1], padding\u003dpadding)\n        if bias:\n            b \u003d tf.get_variable(\n                \u0027b\u0027, [n_filters],\n                initializer\u003dtf.truncated_normal_initializer(stddev\u003dstddev))\n            conv \u003d conv + b\n        return activation(conv)\n\n\ndef linear(x, n_units, scope\u003dNone, stddev\u003d0.02,\n           activation\u003dlambda x: x):\n    \"\"\"Fully-connected network.\n\n    Parameters\n    ----------\n    x : Tensor\n        Input tensor to the network.\n    n_units : int\n        Number of units to connect to.\n    scope : str, optional\n        Variable scope to use.\n    stddev : float, optional\n        Initialization\u0027s standard deviation.\n    activation : arguments, optional\n        Function which applies a nonlinearity\n\n    Returns\n    -------\n    x : Tensor\n        Fully-connected output.\n    \"\"\"\n    shape \u003d x.get_shape().as_list()\n\n    with tf.variable_scope(scope or \"Linear\"):\n        matrix \u003d tf.get_variable(\"Matrix\", [shape[1], n_units], tf.float32,\n                                 tf.random_normal_initializer(stddev\u003dstddev))\n        return activation(tf.matmul(x, matrix))\n"
}, {
  "ml_generate_text_llm_result": " This is C++ code. It is part of the public_biking module of the Synthese software framework. \nThe code is registering the PublicBikeNetworkTableSync, PublicBikeStationTableSync, PublicBikeJourneyPlannerService, PublicBikeStationsListFunction and PublicBikeStation classes with the Synthese framework. \nThis makes these classes available for use by other modules in the framework.",
  "ml_generate_text_rai_result": "{\"blocked\":false,\"categories\":[],\"scores\":[]}",
  "ml_generate_text_status": "",
  "prompt": "Can you read the code in the following text and generate a summary for what the code is doing and what language it is written in:\n#include \"PublicBikeJourneyPlannerService.hpp\"\n#include \"PublicBikeStation.hpp\"\n#include \"PublicBikeStationsList.hpp\"\n\n#include \"PublicBikeNetworkTableSync.hpp\"\n#include \"PublicBikeStationTableSync.hpp\"\n\n#include \"PublicBikingModule.inc.cpp\"\n\nvoid synthese::public_biking::moduleRegister()\n{\n\tsynthese::public_biking::PublicBikeNetworkTableSync::integrate();\n\tsynthese::util::FactorableTemplate\u003csynthese::db::DBTableSync,synthese::public_biking::PublicBikeStationTableSync\u003e::integrate();\n\tsynthese::util::FactorableTemplate\u003csynthese::db::Fetcher\u003csynthese::graph::Vertex\u003e, synthese::public_biking::PublicBikeStationTableSync\u003e::integrate();\n\tsynthese::util::FactorableTemplate\u003csynthese::db::Fetcher\u003csynthese::geography::NamedPlace\u003e, synthese::public_biking::PublicBikeStationTableSync\u003e::integrate();\n\n\tsynthese::public_biking::PublicBikeJourneyPlannerService::integrate();\n\tsynthese::public_biking::PublicBikeStationsListFunction::integrate();\n\n\tsynthese::public_biking::PublicBikeStation::integrate();\n\n\t// Registries\n\tINTEGRATE(synthese::public_biking::PublicBikeNetwork);\n\tINTEGRATE(synthese::public_biking::PublicBikeStation);\n}\n"
}]